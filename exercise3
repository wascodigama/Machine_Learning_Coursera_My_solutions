Multi-class Classification and Neural Networks

% Load saved matrices from file
load('ex3data1.mat');
% The matrices X and y will now be in your Octave environment

lrCostFunction.m
h_x = sigmoid(X*theta); %hypothesis
reg_t = (lambda/(2*m))*sum(theta(2:end).^2); % Regularization term
J = (1/m)*sum((-y.*log(h_x)) - ((1-y).*log(1 - h_x))) + reg_t; %logistic regression cost function

grad(1) = (1/m)*(X(:,1)'*(h_x - y)); %for j=0
grad(2:end) = (1/m)*(X(:,2:end)'*(h_x -y)) + (lambda/m)*theta(2:end); %for j>=1
% =============================================================


oneVsAll.m
% Example Code for fmincg:
%
%     % Set Initial theta
%     initial_theta = zeros(n + 1, 1);
%     
%     % Set options for fminunc
%     options = optimset('GradObj', 'on', 'MaxIter', 50);
% 
%     % Run fmincg to obtain the optimal theta
%     % This function will return theta and the cost 
%     [theta] = ...
%         fmincg (@(t)(lrCostFunction(t, X, (y == c), lambda)), ...
%                 initial_theta, options);
%

initial_theta = zeros(n+1, 1);
options = optimset('GradObj', 'on', 'MaxIter', 50);

for c = 1:num_labels
all_theta(c,:) = fmincg(@(t)(lrCostFunction(t, X, (y == c), lambda)), initial_theta, options);
end
% =========================================================================


predictOneVsAll.m
% Instructions: Complete the following code to make predictions using
%               your learned logistic regression parameters (one-vs-all).
%               You should set p to a vector of predictions (from 1 to
%               num_labels).
%
% Hint: This code can be done all vectorized using the max function.
%       In particular, the max function can also return the index of the 
%       max element, for more information see 'help max'. If your examples 
%       are in rows, then, you can use max(A, [], 2) to obtain the max 
%       for each row.
%       

[prob_p,p] = max(X*all_theta',[],2); %vectorized implementation
% =========================================================================


% Load saved matrices from file
load('ex3weights.mat');
% The matrices Theta1 and Theta2 will now be in your Octave
% environment
% Theta1 has size 25 x 401
% Theta2 has size 10 x 26

predict.m
% ====================== YOUR CODE HERE ======================
% Instructions: Complete the following code to make predictions using
%               your learned neural network. You should set p to a 
%               vector containing labels between 1 to num_labels.
%
% Hint: The max function might come in useful. In particular, the max
%       function can also return the index of the max element, for more
%       information see 'help max'. If your examples are in rows, then, you
%       can use max(A, [], 2) to obtain the max for each row.
%
a1 = [ones(m,1) X]; %input feature
z1 = a1*Theta1'; %first hidden layer input feature
a2 = sigmoid(z1); %first hidden layer output (activation)

a2 = [ones(size(a2,1),1) a2]; %adding bias term
z2 = a2*Theta2'; %output layer input
h_x = sigmoid(z2); %output layers freatures (activation)
[prob_p,p] = max(h_x, [], 2); %prediction of most probable feature
% =========================================================================
